/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
        

    macros {
        macro_underscore: macro_underscore {    //ASCII码下划线宏
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT &mo 1>
                , <&macro_tap &kp KP_N9 &kp KP_N5>
                , <&macro_release &kp LALT &mo 1>
                ;
        };
        macro_multiply: macro_multiply {    //ASCII码乘号宏
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT &mo 1>
                , <&macro_tap &kp KP_N2 &kp KP_N1 &kp KP_N5>
                , <&macro_release &kp LALT &mo 1>
                ;
        };      
            macro_todo: macro_todo {    //todo list 宏
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp KP_MINUS &kp SPACE &kp LBKT &kp SPACE &kp RBKT &kp SPACE>
                ;
        };      
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | ALT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \  |
//                    | CTRL | LWR | SPC |   | ENT | RSE  | GUI |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LALT &kp A &kp S &kp D &lt 3 F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &lt 5 B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                  &kp LCTRL &mo 1 &kp SPACE   &kp RET &mo 2 &kp RGUI
                        >;
                };
                first_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans     &trans             &trans             &kp UP              &trans             &kp LBKT           &kp RBKT         &kp KP_N7    &kp KP_N8    &kp KP_N9    &kp KP_MULTIPLY          &trans
   &trans        &trans             &kp LEFT           &kp DOWN            &kp RIGHT          &kp LPAR           &kp RPAR         &kp KP_N4    &kp KP_N5    &kp KP_N6    &kp KP_MINUS     &kp KP_PLUS
   &kp LSHFT      &trans       &trans       &trans        &trans       &trans       &trans        &kp KP_N1    &kp KP_N2    &kp KP_N3    &kp KP_DIVIDE       &kp KP_DOT
                          	&kp LCTRL     &trans       &kp SPACE        &kp RET            &trans             &kp KP_N0
                        >;
                };

                second_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans    &trans   &trans &kp UP   &trans   &kp LBKT       &kp RBKT            &trans      &kp KP_NUMLOCK         &trans     &trans       &kp C_MUTE
   &trans  &trans   &kp LEFT &kp DOWN   &kp RIGHT   &kp LPAR       &kp RPAR    &kp HOME    &kp END        &kp PG_UP  &kp PG_DN    &kp C_VOL_UP
   &kp LSHFT &kp N1   &kp N2 &kp N3   &kp N4   &kp N5       &kp N6            &kp N7      &kp N8         &kp N9     &trans    &kp C_VOL_DN
                    	     &kp LCTRL &trans   &kp SPACE   &kp RET           &trans      &kp DEL
                        >;
                };
                founction_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans    &trans   &trans &trans   &trans   &ext_power EP_TOG                 &kp F7      &kp F8      &kp F9         &kp F10    &kp F11      &kp F12
   &trans    &trans   &trans &trans   &trans   &trans                 &kp F1      &kp F2      &kp F3         &kp F4     &kp F5    &kp F6
   &kp LSHFT &trans   &trans &trans   &trans   &trans                 &trans      &trans      &trans         &trans     &trans    &trans
                    	     &kp LCTRL &trans   &kp SPACE             &kp RET     &trans      &kp DEL
                        >;
                };
                lock_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
                    	  &none &none  &none                    &none     &none       &none
                        >;
                };
                bluetooth_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
   &none    &none   &none &none   &none   &none                 &none      &none      &none         &none     &none    &none
                    	  &none &none  &none                    &none     &none       &none
                        >;
                };
        };



    combos {
        compatible = "zmk,combos";
        combo_tab { //A+S=Tab
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_underscore {  //B+N=_ (通过ASCII码的宏实现，宏定义见文件开头)
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&macro_underscore>;
            layers = <0>;
        };
        combo_minus {   //G+H=-
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp KP_MINUS>;
            layers = <0>;
        };       
        combo_LeftBrace {   //V+B={
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };    
        combo_RightBrace {  //N+M=}
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };        
        combo_LeftParenthesis { //F+G=(
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };          
        combo_RightParenthesis {    //H+J=)
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };   
        combo_LeftBracket { //R+T=[
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };    
        combo_RightBracket {    //Y+U=]
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        combo_equal {   //"/?"+"\|"="="(默认层和数字层均生效)
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp EQUAL>;
            layers = <0 1>;
        };  
/*         combo_dot { //".>"+"/?"="."(仅在数字层生效)
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp KP_DOT>;
            layers = <1>;
        };   */                 
        combo_tilde {   //T+Y=_或——(根据输入法状态输出不同)
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };     
        combo_grave {   //esc+Q=`或~
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };    
        combo_caps {    //alt+A=CAPS
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp CAPS>;
            layers = <0>;
        };   
        combo_multiply {    //;+'=乘号（通过ASCII码宏实现）
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&macro_multiply>;
            layers = <0>;
        };   
        combo_lock {    //Y+L+ENTER=锁定键盘（只能再次按该组合键退出）
            timeout-ms = <100>;
            key-positions = <6 21 39>;
            bindings = <&tog 4>;
        };   
        combo_LeftBackSpace {   //B+S=Backspace(左手退格键)
            timeout-ms = <50>;
            key-positions = <14 29>;
            bindings = <&kp BSPC>;
            layers = <0>;
        };   
        combo_todo {    //T+D=Markdown中todo list快捷键
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&macro_todo>;
            layers = <0>;
        };   
        combo_bt0 {     //先按住B进入蓝牙层，然后同时按ESC+左手切层键+右手数字键切换蓝牙配置文件
            timeout-ms = <100>;
            key-positions = <0 37 41>;
            bindings = <&bt BT_SEL 0>;
            layers = <5>;
        };   
        combo_bt1 {
            timeout-ms = <100>;
            key-positions = <0 31 37>;
            bindings = <&bt BT_SEL 1>;
            layers = <5>;
        };   
        combo_bt2 {
            timeout-ms = <100>;
            key-positions = <0 32 37>;
            bindings = <&bt BT_SEL 2>;
            layers = <5>;
        };   
        combo_bt3 {
            timeout-ms = <100>;
            key-positions = <0 33 37>;
            bindings = <&bt BT_SEL 3>;
            layers = <5>;
        };   
        combo_bt4 {     //该文件暂无法使用，原因未知
            timeout-ms = <100>;
            key-positions = <0 19 37>;
            bindings = <&bt BT_SEL 4>;
            layers = <5>;
        };   
        combo_BtClr {   //清除当前蓝牙配置文件，先按住B进入蓝牙层，然后同时按C+左手切层键+L
            timeout-ms = <100>;
            key-positions = <21 27 37>;
            bindings = <&bt BT_CLR>;
            layers = <5>;
        };    
        combo_LeftEnter {   //左手回车 E+T
            timeout-ms = <10>;
            key-positions = <3 5>;
            bindings = <&kp ENTER>;
            layers = <0>;
        };    
        combo_LeftDelete {   //左手删除  D+E
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp DEL>;
            layers = <0>;
        };     
};

};
