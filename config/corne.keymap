/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | ALT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \  |
//                    | CTRL | LWR | SPC |   | ENT | RSE  | GUI |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LALT &kp A &kp S &kp D &lt 3 F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                  &kp LCTRL &mo 1 &kp SPACE   &kp RET &mo 2 &kp RGUI
                        >;
                };
                first_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &bt BT_CLR     &trans             &trans             &kp UP              &trans             &kp LBKT           &kp RBKT         &kp KP_N7    &kp KP_N8    &kp KP_N9    &trans          &trans
   &kp CAPS        &trans             &kp LEFT           &kp DOWN            &kp RIGHT          &kp LPAR           &kp RPAR         &kp KP_N4    &kp KP_N5    &kp KP_N6    &kp KP_MULTIPLY     &kp KP_PLUS
   &kp LSHFT      &bt BT_SEL 0       &bt BT_SEL 1       &bt BT_SEL 2        &bt BT_SEL 3       &bt BT_SEL 4       &trans        &kp KP_N1    &kp KP_N2    &kp KP_N3    &kp KP_DIVIDE       &kp KP_MINUS
                          	&kp LCTRL     &trans       &kp SPACE        &kp RET            &trans             &kp KP_N0
                        >;
                };

                second_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans    &trans   &trans &kp UP   &trans   &kp LBKT       &kp RBKT            &trans      &kp KP_NUMLOCK         &trans     &trans       &kp C_MUTE
   &trans  &trans   &kp LEFT &kp DOWN   &kp RIGHT   &kp LPAR       &kp RPAR    &kp HOME    &kp END        &kp PG_UP  &kp PG_DN    &kp C_VOL_UP
   &kp LSHFT &kp N1   &kp N2 &kp N3   &kp N4   &kp N5       &kp N6            &kp N7      &kp N8         &kp N9     &trans    &kp C_VOL_DN
                    	     &kp LCTRL &trans   &kp SPACE   &kp RET           &trans      &kp DEL
                        >;
                };
                founction_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans    &trans   &trans &trans   &trans   &trans                 &kp F7      &kp F8      &kp F9         &kp F10    &kp F11      &kp F12
   &trans    &trans   &trans &trans   &trans   &trans                 &kp F1      &kp F2      &kp F3         &kp F4     &kp F5    &kp F6
   &kp LSHFT &trans   &trans &trans   &trans   &trans                 &trans      &trans      &trans         &trans     &trans    &trans
                    	     &kp LCTRL &trans   &kp SPACE             &kp RET     &trans      &kp DEL
                        >;
                };
                power_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans    &trans   &trans &trans   &trans   &trans                 &trans      &trans      &trans         &trans    &trans      &trans
   &trans    &trans   &trans &trans   &trans   &trans                 &trans      &trans      &trans         &trans     &trans    &trans
   &kp LSHFT &trans   &trans &trans   &trans   &trans                 &trans      &trans      &trans         &trans     &trans    &trans
                    	     &kp LCTRL &trans   &kp SPACE             &kp RET     &trans      &kp DEL
                        >;
                };
        };



    combos {
        compatible = "zmk,combos";
        combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
            layers = <0>;
        };
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp KP_MINUS>;
            layers = <0>;
        };       
        combo_LeftBrace {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };    
        combo_RightBrace {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };        
        combo_LeftParenthesis {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };          
        combo_RightParenthesis {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };   
        combo_LeftBracket {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };    
        combo_RightBracket {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp EQUAL>;
            layers = <0 1>;
        };  
        combo_dot {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp KP_DOT>;
            layers = <1>;
        };                   
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp TILDE2>;
            layers = <0>;
        };     
        combo_grave {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TILDE2>;
            layers = <0>;
        };    
        combo_poweron {
            timeout-ms = <50>;
            key-positions = <0 5 38>;
            bindings = <&ext_power EP_ON>;
            layers = <4>;
        };    
        combo_poweroff {
            timeout-ms = <50>;
            key-positions = <0 17 38>;
            bindings = <&ext_power EP_OFF>;
            layers = <4>;
        }; 
};

};
